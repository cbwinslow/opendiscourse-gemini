-- Supabase Audit Log Trigger
-- This script creates a generic audit log table and a trigger function
-- that can be applied to any table to track changes.

-- 1. Create the audit log table
CREATE TABLE IF NOT EXISTS audit_log (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    table_name TEXT NOT NULL,
    record_id TEXT NOT NULL,
    old_record_data JSONB,
    new_record_data JSONB,
    user_id UUID,
    action TEXT NOT NULL CHECK (action IN ('INSERT', 'UPDATE', 'DELETE')),
    action_timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- 2. Create the trigger function
CREATE OR REPLACE FUNCTION audit_trigger_function()
RETURNS TRIGGER AS $$
DECLARE
    user_id_value UUID;
BEGIN
    -- Try to get the user ID from the request context
    BEGIN
        user_id_value := auth.uid();
    EXCEPTION WHEN OTHERS THEN
        user_id_value := NULL;
    END;

    IF (TG_OP = 'INSERT') THEN
        INSERT INTO audit_log (table_name, record_id, new_record_data, user_id, action)
        VALUES (TG_TABLE_NAME, NEW.id::TEXT, to_jsonb(NEW), user_id_value, 'INSERT');
        RETURN NEW;
    ELSIF (TG_OP = 'UPDATE') THEN
        INSERT INTO audit_log (table_name, record_id, old_record_data, new_record_data, user_id, action)
        VALUES (TG_TABLE_NAME, NEW.id::TEXT, to_jsonb(OLD), to_jsonb(NEW), user_id_value, 'UPDATE');
        RETURN NEW;
    ELSIF (TG_OP = 'DELETE') THEN
        INSERT INTO audit_log (table_name, record_id, old_record_data, user_id, action)
        VALUES (TG_TABLE_NAME, OLD.id::TEXT, to_jsonb(OLD), user_id_value, 'DELETE');
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- 3. Apply the trigger to key tables
-- We will audit changes to sessions and messages.
DROP TRIGGER IF EXISTS audit_sessions_trigger ON sessions;
CREATE TRIGGER audit_sessions_trigger
AFTER INSERT OR UPDATE OR DELETE ON sessions
FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

DROP TRIGGER IF EXISTS audit_messages_trigger ON messages;
CREATE TRIGGER audit_messages_trigger
AFTER INSERT OR UPDATE OR DELETE ON messages
FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();
